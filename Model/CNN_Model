import scipy
import tensorflow as tf
import matplotlib.pyplot as plt
import cv2
import os
import numpy as np
from tensorflow import keras
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.preprocessing import image



train_datagen = ImageDataGenerator(rescale = 1/255)
val_datagen = ImageDataGenerator(rescale = 1/255)

train_dataset = train_datagen.flow_from_directory('C:/Users/ASUS/OneDrive/Desktop/computer-vision/basedata3/train/',
                                   target_size = (200,200),
                                   batch_size = 32,
                                   class_mode = 'binary')

validation_dataset = val_datagen.flow_from_directory('C:/Users/ASUS/OneDrive/Desktop/computer-vision/basedata3/validation/',
                                        target_size = (200,200),
                                        batch_size = 32,
                                        class_mode = 'binary')

model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(16,(3,3), activation = 'relu', input_shape = (200,200,3)),
    tf.keras.layers.MaxPool2D(2,2),
    #
    tf.keras.layers.Conv2D(32,(3,3), activation = 'relu'),
    tf.keras.layers.MaxPool2D(2,2),
    #
    tf.keras.layers.Conv2D(64,(3,3), activation = 'relu'),
    tf.keras.layers.MaxPool2D(2,2),
    ##
    tf.keras.layers.Flatten(),
    ##
    tf.keras.layers.Dense(512, activation = 'relu'),
    ##
    tf.keras.layers.Dense(1, activation = 'sigmoid')  # changed to 3 units and softmax activation
])

model.compile(loss = 'binary_crossentropy',
             optimizer = tf.keras.optimizers.RMSprop(learning_rate = 0.0010),
             metrics = ['accuracy'])

model_fit = model.fit(train_dataset,
                     steps_per_epoch = 3,
                     epochs = 100,
                     validation_data = validation_dataset)

model.save('dermadx_model.model')

dir_path = 'C:/Users/ASUS/OneDrive/Desktop/computer-vision/basedata3/test'

for i in os.listdir(dir_path ):
    img = image.load_img(dir_path + '//' + i, target_size = (200,200))
    plt.imshow(img)
    plt.show()
    
    X = image.img_to_array(img)
    X = np.expand_dims(X,axis = 0)
    images = np.vstack([X])
    val = model.predict(images)
    
    if val == 0:
        print("You have Acne")
    else:
        print("You have Monkeypox")

keras_file = "DermaDX_Model.h5"
keras.models.save_model(model, keras_file)
